'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/docker/','title':"Docker",'section':"文档",'content':"DOCKER #  Docker是什么 #  Docker 是一个开放源码的软件，是一個开放平台，用于开发应用、交付（shipping）应用、运行应用。 Docker允许用户将应用单独分割出来，形成更小的颗粒（容器），从而提高交付软件的速度。\n Docker与虚拟机的区别 #  Docker容器与虚拟机类似，但二者在原理上不同。容器是将操作系统层虚拟化，虚拟机则是虚拟化硬件，因此容器更具有便携性、高效地利用服务器。 容器更多的用于表示软件的一个标准化单元。由于容器的标准化，因此它可以无视操作系统的差异，部署到任何一个地方。另外，Docker也为容器提供更强的业界的隔离兼容。而虚拟机实现是使用虚拟化引擎虚拟硬件层，运行程序需要安装完整镜像的操作系统；\n直观类比： #   物理机\n类比：别墅，独立花园 虚拟机\n类比：小区套房，共享花园，独立卫生间 docker\n类比：胶囊房，共享花园，共享卫生间，独立床位   Docker利用Linux核心下的下namespace与cgroup方式实现容器原理\nnamespace: 隔离进程，网络，用户ID, 挂载\ncgroup: 隔离资源（CPU, 内存，I/O）\nps axf sudo unshare --fork --pid --mount-proc=/proc /bin/sh ps axf  Docker核心与概念知识 #  DockerHub  https://hub.docker.com 国内节点：阿里，网易，daoclound 等 地址配置  镜像  # 镜像拉取 docker pull 镜像名称「:tag」 # 查看镜像 docker images # 删除镜像 docker rmi 镜像标记（镜像名称，哈希值，短哈希值） # 镜像导入导出 # 镜像名称修改 docker tag 镜像标记 镜像名称「:tag」 容器  # 查看容器 docker container ls # 删除容器 docker rm 容器标示 # 容器内执行 docker exec -it 容器 /bin/bash (i:inter t:termail) # 查看进程 docker ps -a # 查看日志 docker logs -f 容器ID （-f 等同于 tail） # 开启容器 docker start # 关闭容器 docker stop # 执行容器 docker run -v 本地数据卷:容器数据卷 -p 本地端口:容器端口 --name 容器名称[tag] -d 执行镜像 . 数据券  # 查看数据卷 docker volume ls # 删除数据卷 docker volume rm 数据卷名称  网络管理\n桥接 host : 直接暴露给本地(宿主机) null\n  网络安全\n  Dockerfile\n  FROM: 指定当前自定义镜像依赖的环境ARG: 参数,只在构建镜像中使用ENV: 在容器中使用的参数LABEL: 给构建的镜像打标签COPY: 将相对路径下的内容复制到自定义镜像中ADD: 本地或远程的内容复制到自定义镜像中WORKDIR: 声明镜像的默认工作目录CMD: 需要执行的命令（在workdir下执行的，cmd可以写多的，只以最后一个为准）ENTRYPOINT: 容器入口执行命令，在CMD命令之前EXPOSE: 暴露的端口VOLUME: 数据卷挂载RUN: 镜像构建中执行命令 Docker三剑客 #   docker-compose 提供更加友好的脚本执行服务 docker-machine 提供容器服务 swarm 集群服务，市场没有获得成功。google的Kubernetes   使用Docker的优势 #   一致的开发环境 更高效的利用系统资源 方便的扩展 方便迁移 更好的持续交付与持续集成   php7(phalcon)+nginx+mysql #  目录结构 #  |----nginx | |----default.conf | |----dc.conf |----html | |----index.php | |----project |----php7 | |----Dockerfile |----php5 |----mysql |----redis |----docker-compose.yml |----.env Dockerfile\n#引入镜像 php:[tag] FROM php:7.2-fpm # 设置时区 ENV TZ=Asia/Shanghai RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \u0026amp;\u0026amp; echo $TZ \u0026gt; /etc/timezone ARG phalcon_version=4.1.0 # 更新安装依赖包和PHP核心拓展 RUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\ wget \\ git \\ libfreetype6-dev \\ libjpeg62-turbo-dev \\ libpng-dev \\ \u0026amp;\u0026amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \\ \u0026amp;\u0026amp; docker-php-ext-install -j$(nproc) gd \\ \u0026amp;\u0026amp; docker-php-ext-install zip \\ \u0026amp;\u0026amp; docker-php-ext-install pdo_mysql \\ \u0026amp;\u0026amp; docker-php-ext-install opcache \\ \u0026amp;\u0026amp; docker-php-ext-install mysqli \\ \u0026amp;\u0026amp; rm -r /var/lib/apt/lists/* RUN pecl install redis-5.0.2 \\ \u0026amp;\u0026amp; pecl install psr \\ \u0026amp;\u0026amp; docker-php-ext-enable redis psr # git方式 RUN cd /home \\ \u0026amp;\u0026amp; git clone --depth=1 git://github.com/phalcon/cphalcon.git \\ \u0026amp;\u0026amp; cd cphalcon/build \\ \u0026amp;\u0026amp; ./install \\ \u0026amp;\u0026amp; echo \u0026quot;extension=phalcon.so\u0026quot; \u0026gt; /usr/local/etc/php/conf.d/phalcon.ini \\ \u0026amp;\u0026amp; rm -rf /home/* #phalcon #https://github.com/phalcon/cphalcon/releases # wget方式 # RUN wget https://github.com/phalcon/cphalcon/archive/v${phalcon_version}.tar.gz \\ # \u0026amp;\u0026amp; tar -zxvf v${phalcon_version}.tar.gz \\ # \u0026amp;\u0026amp; cd cphalcon-${phalcon_version}/build/ \\ # \u0026amp;\u0026amp; ./install \\ # \u0026amp;\u0026amp; echo \u0026quot;extension=phalcon.so\u0026quot; \u0026gt; /usr/local/etc/php/conf.d/phalcon.ini \\ # \u0026amp;\u0026amp; rm -rf ./cphalcon-${phalcon_version} # 解压本地文件方式 # COPY ./v4.1.0.tar.gz /home # composer RUN curl -sS https://getcomposer.org/installer | php \\ \u0026amp;\u0026amp; mv composer.phar /usr/bin/composer \\ \u0026amp;\u0026amp; composer self-update --clean-backups WORKDIR \u0026quot;/var/www/html\u0026quot; docker-compose.yml\nversion: \u0026#34;3.8\u0026#34; services: php: build: ./php container_name: test restart: always networks: - default ports: - 9000:9000 volumes: - ${_HOME}/php/php.ini:/usr/local/etc/php/conf.d/php.ini - ${_HOME}/php/www.conf:/usr/local/etc/php-fpm.d/www.conf - ${_HOME}/html:/usr/share/nginx/html - ${_HOME}/html:/var/www/html nginx: image: nginx:latest container_name: nginx restart: always depends_on: - php networks: - default env_file: - .env environment: - NGINX_HOST=\u0026#34;localhost\u0026#34; ports: - 80:80 links: - php volumes: - ${_HOME}/nginx/default.conf:/etc/nginx/conf.d/default.conf - ${_HOME}/nginx:/etc/nginx/conf.d - ${_HOME}/html:/usr/share/nginx/html networks: default: driver: bridge "});})();